include:
  - project: veepee/vptech/ci-cd/markdown-lint
    ref: 1-latest
    file: gitlab-ci.yml
  - project: veepee/vptech/ci-cd/semantic-release
    ref: 2-latest
    file: gitlab-ci.yml
  - project: veepee/vptech/ci-cd/shellcheck
    ref: 2-latest
    file: gitlab-ci.yml

.template: &build
  stage: build
  image: docker.registry.vptech.eu/docker:latest
  before_script:
    - apk update && apk add bash curl
    - chmod +x build.sh
  artifacts:
    expire_in: 1 day
    paths:
      - image
  services:
    - name: docker.registry.vptech.eu/docker:dind
      alias: docker
      command: ["--privileged"]
  tags:
    - dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""

.template: &deploy
  stage: deploy
  image: docker.registry.vptech.eu/docker:latest
  before_script:
    - chmod +x build.sh
    - docker login -u "$DOCKER_PUBLIC_REGISTRY_USERNAME" -p "$DOCKER_PUBLIC_REGISTRY_PASSWORD"
    - docker load -i image/alpine-v3.14.tar
    - docker load -i image/alpine-v3.15.tar
    - docker load -i image/alpine-v3.16.tar
    - docker load -i image/alpine-v3.18.tar
    - docker load -i image/alpine-v3.19.tar
    - docker load -i image/alpine-v3.20.tar
    - docker load -i image/alpine-v3.22.tar
  only:
    - main
    - master
  services:
    - name: docker.registry.vptech.eu/docker:dind
      alias: docker
      command: ["--privileged"]
  tags:
    - dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""

stages:
  - lint
  - build
  - deploy
  - release

# Test just Alpine 3.22
build:3.22:
  <<: *build
  script:
    # Run the bootstrap step and manually handle import
    - mkdir -p image
    # Extract the necessary variables from build.sh
    - export distname="3.22.0"
    - export distid="3.22"
    - export timezone="Europe/Amsterdam"
    
    # Manual bootstrap (copied from build.sh)
    - export cdn="http://dl-cdn.alpinelinux.org"
    - export ftp="${cdn}/alpine/v${distid}/releases/x86_64"
    - export rootfs="${ftp}/alpine-minirootfs-${distname}-x86_64.tar.gz"
    - export image="/tmp/image-${distname}-amd64"
    
    # Download and extract
    - echo "Downloading from ${rootfs}"
    - curl --location --output "${image}.tar.gz" --silent "${rootfs}"
    - mkdir -p "${image}"
    - tar -x -C "${image}" -f "${image}.tar.gz" --numeric-owner -z
    
    # Configure
    - echo "${timezone}" > "${image}/etc/timezone"
    - echo "nameserver 8.8.4.4" > "${image}/etc/resolv.conf"
    - echo "nameserver 8.8.8.8" >> "${image}/etc/resolv.conf"
    - echo "http://mirror.veepee.tech/alpine/v${distid}/main" > "${image}/etc/apk/repositories"
    - echo "http://mirror.veepee.tech/alpine/v${distid}/community" >> "${image}/etc/apk/repositories"
    
    # Create archive
    - tar -C "${image}" -c -f "${image}.tar" --numeric-owner .
    
    # Import with Docker
    - docker import "${image}.tar" "alpine:${distid}"
    - docker save "alpine:${distid}" > "image/alpine-v${distid}.tar"

test:deploy-3.22:
  <<: *deploy
  stage: deploy
  before_script:
    - apk update && apk add bash curl
    - chmod +x build.sh
    - docker login -u "$DOCKER_PUBLIC_REGISTRY_USERNAME" -p "$DOCKER_PUBLIC_REGISTRY_PASSWORD"
    - docker load -i image/alpine-v3.22.tar
  script:
    - docker tag alpine:3.22 vptech/alpine:test-3.22
    - docker push vptech/alpine:test-3.22
  needs:
    - build:3.22
