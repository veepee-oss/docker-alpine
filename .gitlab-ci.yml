include:
  - project: veepee/vptech/ci-cd/markdown-lint
    ref: 1-latest
    file: gitlab-ci.yml
  - project: veepee/vptech/ci-cd/semantic-release
    ref: 2-latest
    file: gitlab-ci.yml
  - project: veepee/vptech/ci-cd/shellcheck
    ref: 2-latest
    file: gitlab-ci.yml

.template: &build
  stage: build
  image: docker.registry.vptech.eu/docker:latest
  before_script:
    - apk update && apk add bash curl
    - chmod +x build.sh
    # Create CI-specific build script
    - >
      cat > ci_build.sh << 'EOF'
      #!/bin/bash
      set -e
      
      # Source the original script to get functions
      source ./build.sh
      
      # Override Docker functions to avoid failures
      function docker_import() {
          echo "Skipping docker_import in CI environment"
          return 0
      }
      
      function docker_push() {
          echo "Skipping docker_push in CI environment"
          return 0
      }
      
      # Run just the bootstrap
      docker_bootstrap
      
      # Print tarball location
      echo "Bootstrap completed successfully. Tarball at: ${image}.tar"
      EOF
    - chmod +x ci_build.sh
  artifacts:
    expire_in: 1 day
    paths:
      - image
  tags:
    - dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""

.template: &deploy
  stage: deploy
  image: docker.registry.vptech.eu/docker:latest
  before_script:
    - chmod +x build.sh
    - docker login -u "$DOCKER_PUBLIC_REGISTRY_USERNAME" -p "$DOCKER_PUBLIC_REGISTRY_PASSWORD"
  only:
    - main
    - master
  services:
    - name: docker.registry.vptech.eu/docker:dind
      alias: docker
      command: ["--privileged"]
  tags:
    - dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""

stages:
  - lint
  - build
  - deploy
  - release

build:3.14:
  <<: *build
  script:
    # Run the CI-specific build script
    - ./ci_build.sh
    # Override variables for this specific version
    - export distname="3.14.7"
    - export distid="3.14"
    # Import the image manually
    - mkdir -p image
    - docker import /tmp/image-${distname}-amd64.tar alpine:${distid}
    - docker save alpine:${distid} > image/alpine-v${distid}.tar

# Repeat for other versions...

build:3.22:
  <<: *build
  script:
    # Run the CI-specific build script
    - ./ci_build.sh
    # Override variables for this specific version
    - export distname="3.22.0"
    - export distid="3.22"
    # Import the image manually
    - mkdir -p image
    - docker import /tmp/image-${distname}-amd64.tar alpine:${distid}
    - docker save alpine:${distid} > image/alpine-v${distid}.tar

# https://hub.docker.com/u/vptech/
vptech:
  <<: *deploy
  script:
    - docker load -i image/alpine-v3.14.tar
    - docker load -i image/alpine-v3.15.tar
    - docker load -i image/alpine-v3.16.tar
    - docker load -i image/alpine-v3.18.tar
    - docker load -i image/alpine-v3.19.tar
    - docker load -i image/alpine-v3.20.tar
    - docker load -i image/alpine-v3.22.tar
    - docker tag alpine:3.14 vptech/alpine:3.14
    - docker tag alpine:3.15 vptech/alpine:3.15
    - docker tag alpine:3.16 vptech/alpine:3.16
    - docker tag alpine:3.18 vptech/alpine:3.18
    - docker tag alpine:3.19 vptech/alpine:3.19
    - docker tag alpine:3.20 vptech/alpine:3.20
    - docker tag alpine:3.22 vptech/alpine:3.22
    - docker push --all-tags vptech/alpine
